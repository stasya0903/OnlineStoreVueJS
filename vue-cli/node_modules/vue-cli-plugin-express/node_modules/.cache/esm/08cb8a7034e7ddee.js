let routesTable,clearConsole,done,hasYarn,chalk;_34e‚Äç.x([["default",()=>_34e‚Äç.o]]);_34e‚Äç.w("./routeTable",[["default",["routesTable"],function(v){routesTable=v}]]);_34e‚Äç.w("@vue/cli-shared-utils",[["clearConsole",["clearConsole"],function(v){clearConsole=v}],["done",["done"],function(v){done=v}],["hasYarn",["hasYarn"],function(v){hasYarn=v}]]);_34e‚Äç.w("chalk",[["default",["chalk"],function(v){chalk=v}]]);



const _34e‚Äçanonymous=({ urls, routes, isInProduction, shouldServeApp }) => {
  const cmd = exec => `${chalk.cyan((hasYarn() ? 'yarn ' : 'npm run ') + exec)}`;

  clearConsole();
  done('', Date().toString());

  console.log();
  console.log('  ‚ôªÔ∏è  Server running at:');
  console.log(`    - Local:   ${chalk.cyan(urls.local)}`);
  console.log(`    - Network: ${chalk.cyan(urls.network)}`);
  console.log();

  console.log();
  if (isInProduction) {
    console.log(`  üì¶ You're in ${chalk.bold('production')} mode. To build the application, run ${cmd('build')}.`);
    console.log();
    if (shouldServeApp) {
      console.log(`  üéâ Fallback to the app enabled: ${chalk.bold('your application is served!')}`);
    } else {
      console.log(`  ‚ö†Ô∏è  Fallback to the app disabled: ${chalk.bold('your application is not served!')}`);
    }
  } else {
    console.log(`  ‚öô  You're in ${chalk.bold('development')} mode. to start the application, run ${cmd('serve')}.`);
    console.log();
    if (shouldServeApp) {
      console.log(`  üéâ Fallback to this server enabled: ${chalk.bold('you can use relative routes in your code!')}`);
    } else {
      console.log(`  ‚ö†Ô∏è  Fallback to this server disabled: ${chalk.bold('you cannot use relative routes in your code!')}`);
    }
  }

  console.log();
  if (routes.length) {
    console.log('  üîÄ Api routes found:');
    _34e‚Äç.g.console.log(routesTable(routes));
  } else {
    console.log(`  üîÄ No api routes found${isInProduction ? '' : ' (yet?)'}.`);
  }
  console.log();
};_34e‚Äç.d(_34e‚Äçanonymous);
